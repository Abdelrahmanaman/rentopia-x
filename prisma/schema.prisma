generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  favourites    Favourite[]
  history       History[]
  apartments    Apartment[]
  reviews       Reviews[]
  sessions      Session[]
  account       Account[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("users")
}

model Apartment {
  id          String      @id @default(cuid())
  slug        String      @unique
  address     String
  city        String
  rooms       Int
  wifi        Boolean
  tv          Boolean
  description String
  images      String[]
  price       Int
  favourites  Favourite[]
  history     History[]
  Reviews     Reviews[]
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("apartments")
}

model Favourite {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, apartmentId])
  @@map("favourites")
}

model History {
  id          Int       @id @default(autoincrement())
  visit_date  DateTime
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("history")
}

model Reviews {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId String
  text        String
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("reviews")
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}
